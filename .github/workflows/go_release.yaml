name: Push release files
on:
  push:
    # Sequence of patterns matched against refs/tags 
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/cache@v2
        with:
          path: ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v2
      # Version
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::${GITHUB_REF#refs/*/}
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
          if [ -f Gopkg.toml ]; then
              curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
              dep ensure
          fi
      - name: Test
        run: make test
      - name: Build
        run: |
          make build-mac
          make build-win64
          make build-linux

      - name: Zip files
        run: |
          mkdir -p ./tmp
          cp ./build/ipscan_64.exe ./tmp/ipscan_64.exe
          cp ./build/ipscan_linux ./tmp/ipscan_linux
          cp ./build/ipscan_mac ./tmp/ipscan_mac
          zip -r -j ./build/ip-scanner_${{ steps.get_version.outputs.VERSION }}.zip ./tmp

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: "Ny version *IP Scanner ${{ steps.get_version.outputs.VERSION }}* finns tillg√§nglig :rocket:\n\n"
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./build/ip-scanner_${{ steps.get_version.outputs.VERSION }}.zip
          asset_name: ip-scanner_${{ steps.get_version.outputs.VERSION }}.zip
          asset_content_type: application/zip